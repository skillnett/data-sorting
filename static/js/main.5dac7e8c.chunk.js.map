{"version":3,"sources":["managers/DataManager.js","styles/rootStyles.js","utils/dateUtils.js","components/ProjectHeader.js","components/ProjectDetails.js","components/UserInfo.js","components/WithEmptyDataValidation.js","components/DeviceInfo.js","components/ProjectCard.js","App.js","reportWebVitals.js","index.js"],"names":["DataManager","getInitialProjects","projectData","map","project","index","devices","users","iterateData","projects","data","key","forEach","item","matchedProject","find","id","projectId","push","getSortableProjectsData","deviceData","userData","rootStyles","makeStyles","theme","root","flexGrow","padding","paper","spacing","marginTop","color","palette","text","secondary","getFormattedDate","date","dayjs","format","ProjectHeader","onProjectTitleChange","deleteProjectHandler","expirationDate","beginDate","title","startDate","endDate","Grid","container","alignItems","justify","TextField","label","value","onChange","event","Box","IconButton","aria-label","onClick","ProjectDetails","children","xs","sm","Paper","className","UserInfo","appuserId","firstName","lastName","display","flexDirection","marginBottom","WithEmptyDataValidation","emptyMessage","length","DeviceInfo","deviceId","serialNumber","ProjectCard","projectsData","setProjectsData","classes","target","editedProjectData","updatedProjects","filter","user","device","App","useState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5dac7e8c.chunk.js","sourcesContent":["import projectData from '../data/project.json';\nimport deviceData from '../data/device.json';\nimport userData from '../data/user.json';\n\nexport class DataManager {\n    getInitialProjects = () => {\n        const projects = projectData.map((project, index) => ({\n            ...project,\n            index,\n            devices: [],\n            users: [],\n        }));\n\n        return projects;\n    };\n\n    iterateData = (projects, data, key) => {\n        data.forEach(item => {\n            const matchedProject = projects.find(\n                ({ id }) => id === item.projectId\n            );\n\n            projects[matchedProject.index][key].push(item);\n        });\n    };\n\n    getSortableProjectsData = () => {\n        const projects = this.getInitialProjects();\n\n        this.iterateData(projects, deviceData, 'devices');\n        this.iterateData(projects, userData, 'users');\n\n        return projects;\n    };\n}\n","import { makeStyles } from '@material-ui/core/styles';\n\nexport const rootStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n        padding: 40,\n    },\n    paper: {\n        padding: theme.spacing(2),\n        marginTop: theme.spacing(2),\n        color: theme.palette.text.secondary,\n    },\n}));\n","import dayjs from 'dayjs';\n\nexport const getFormattedDate = date => dayjs(date).format('YYYY MMMM DD');\n","import React from 'react';\nimport { Box, Grid, IconButton, TextField } from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { getFormattedDate } from '../utils/dateUtils';\n\nexport const ProjectHeader = ({\n    onProjectTitleChange,\n    deleteProjectHandler,\n    expirationDate,\n    beginDate,\n    title,\n    id,\n}) => {\n    const startDate = getFormattedDate(beginDate);\n    const endDate = expirationDate\n        ? getFormattedDate(expirationDate)\n        : 'Current date';\n\n    return (\n        <Grid container alignItems='center' justify='space-between'>\n            <TextField\n                label='Project name'\n                value={title}\n                onChange={event => onProjectTitleChange(event, id)}\n            />\n            <Box>\n                {startDate} - {endDate}\n            </Box>\n            <IconButton\n                aria-label='delete'\n                onClick={() => deleteProjectHandler(id)}\n            >\n                <DeleteIcon />\n            </IconButton>\n        </Grid>\n    );\n};\n","import React from 'react';\nimport { Grid, Paper } from '@material-ui/core';\nimport { rootStyles } from '../styles/rootStyles';\n\nexport const ProjectDetails = ({ children }) => {\n    const { paper } = rootStyles();\n\n    return (\n        <Grid item xs={12} sm={6}>\n            <Paper className={paper}>{children}</Paper>\n        </Grid>\n    );\n};\n","import { Box } from '@material-ui/core';\nimport React from 'react';\n\nexport const UserInfo = ({ appuserId, firstName, lastName }) => (\n    <Box display='flex' flexDirection='column' marginBottom={1}>\n        <span>User ID: {appuserId}</span>\n        <span>Name: {`${firstName} ${lastName}`}</span>\n    </Box>\n);\n","import { Box } from '@material-ui/core';\nimport React from 'react';\n\nexport const WithEmptyDataValidation = ({ data, children, emptyMessage }) => {\n    if (data.length) {\n        return children;\n    }\n\n    return <Box>{emptyMessage}</Box>;\n};\n","import { Box } from '@material-ui/core';\nimport React from 'react';\n\nexport const DeviceInfo = ({ deviceId, serialNumber }) => (\n    <Box display='flex' flexDirection='column' marginBottom={1}>\n        <span>Device ID: {deviceId}</span>\n        <span>Serial Number: {serialNumber}</span>\n    </Box>\n);\n","import React from 'react';\nimport { Box, Grid, Paper } from '@material-ui/core';\nimport { ProjectHeader } from './ProjectHeader';\nimport { ProjectDetails } from './ProjectDetails';\nimport { UserInfo } from './UserInfo';\nimport { WithEmptyDataValidation } from './WithEmptyDataValidation';\nimport { DeviceInfo } from './DeviceInfo';\n\nexport const ProjectCard = ({\n    projectsData,\n    setProjectsData,\n    classes,\n    item,\n}) => {\n    const { id, title, users, devices, beginDate, expirationDate } = item;\n\n    const onProjectTitleChange = ({ target }, id) => {\n        const editedProjectData = projectsData.map(project => ({\n            ...project,\n            title: project.id === id ? target.value : project.title,\n        }));\n\n        setProjectsData(editedProjectData);\n    };\n\n    const deleteProjectHandler = projectId => {\n        const updatedProjects = projectsData.filter(\n            ({ id }) => id !== projectId\n        );\n\n        setProjectsData(updatedProjects);\n    };\n\n    return (\n        <Grid item xs={12}>\n            <Paper className={classes.paper}>\n                <ProjectHeader\n                    {...{\n                        onProjectTitleChange,\n                        deleteProjectHandler,\n                        expirationDate,\n                        beginDate,\n                        title,\n                        id,\n                    }}\n                />\n\n                <Grid container spacing={3}>\n                    <ProjectDetails>\n                        <Box marginBottom={2}>Users</Box>\n\n                        <WithEmptyDataValidation\n                            data={users}\n                            emptyMessage='No users on current project'\n                        >\n                            {users.map(user => (\n                                <UserInfo {...user} key={user.appuserId} />\n                            ))}\n                        </WithEmptyDataValidation>\n                    </ProjectDetails>\n                    <ProjectDetails>\n                        <Box marginBottom={2}>Devices</Box>\n\n                        <WithEmptyDataValidation\n                            data={devices}\n                            emptyMessage='No devices on current project'\n                        >\n                            {devices.map(device => (\n                                <DeviceInfo {...device} key={device.deviceId} />\n                            ))}\n                        </WithEmptyDataValidation>\n                    </ProjectDetails>\n                </Grid>\n            </Paper>\n        </Grid>\n    );\n};\n","import React, { useState } from 'react';\nimport { DataManager } from './managers/DataManager';\nimport { Grid } from '@material-ui/core';\nimport { rootStyles } from './styles/rootStyles';\nimport { ProjectCard } from './components/ProjectCard';\n\nconst App = () => {\n    const dataManager = new DataManager();\n    const data = dataManager.getSortableProjectsData();\n\n    const [projectsData, setProjectsData] = useState(data);\n\n    const classes = rootStyles();\n\n    return (\n        <div className={classes.root}>\n            {projectsData?.map(item => (\n                <Grid container spacing={3} key={item.id}>\n                    <ProjectCard\n                        {...{\n                            setProjectsData,\n                            projectsData,\n                            classes,\n                            item,\n                        }}\n                    />\n                </Grid>\n            ))}\n        </div>\n    );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}